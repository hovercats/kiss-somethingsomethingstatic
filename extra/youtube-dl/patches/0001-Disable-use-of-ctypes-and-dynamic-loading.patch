From cf0a9b0dc925e174805118977e74588086816835 Mon Sep 17 00:00:00 2001
From: Michael Forney <mforney@mforney.org>
Date: Mon, 4 Jul 2016 16:14:18 -0700
Subject: [PATCH] Disable use of ctypes and dynamic loading

---
 youtube_dl/compat.py |  20 -----
 youtube_dl/utils.py  | 181 +++----------------------------------------
 2 files changed, 11 insertions(+), 190 deletions(-)

diff --git a/youtube_dl/compat.py b/youtube_dl/compat.py
index 9e45c454b..de474135b 100644
--- a/youtube_dl/compat.py
+++ b/youtube_dl/compat.py
@@ -4,7 +4,6 @@ from __future__ import unicode_literals
 import base64
 import binascii
 import collections
-import ctypes
 import email
 import getpass
 import io
@@ -2980,24 +2979,6 @@ else:
     compat_b64decode = base64.b64decode
 
 
-if platform.python_implementation() == 'PyPy' and sys.pypy_version_info < (5, 4, 0):
-    # PyPy2 prior to version 5.4.0 expects byte strings as Windows function
-    # names, see the original PyPy issue [1] and the youtube-dl one [2].
-    # 1. https://bitbucket.org/pypy/pypy/issues/2360/windows-ctypescdll-typeerror-function-name
-    # 2. https://github.com/ytdl-org/youtube-dl/pull/4392
-    def compat_ctypes_WINFUNCTYPE(*args, **kwargs):
-        real = ctypes.WINFUNCTYPE(*args, **kwargs)
-
-        def resf(tpl, *args, **kwargs):
-            funcname, dll = tpl
-            return real((str(funcname), dll), *args, **kwargs)
-
-        return resf
-else:
-    def compat_ctypes_WINFUNCTYPE(*args, **kwargs):
-        return ctypes.WINFUNCTYPE(*args, **kwargs)
-
-
 __all__ = [
     'compat_HTMLParseError',
     'compat_HTMLParser',
@@ -3010,7 +2991,6 @@ __all__ = [
     'compat_cookiejar_Cookie',
     'compat_cookies',
     'compat_cookies_SimpleCookie',
-    'compat_ctypes_WINFUNCTYPE',
     'compat_etree_Element',
     'compat_etree_fromstring',
     'compat_etree_register_namespace',
diff --git a/youtube_dl/utils.py b/youtube_dl/utils.py
index e722eed58..3364352fa 100644
--- a/youtube_dl/utils.py
+++ b/youtube_dl/utils.py
@@ -9,7 +9,6 @@ import calendar
 import codecs
 import collections
 import contextlib
-import ctypes
 import datetime
 import email.utils
 import email.header
@@ -43,7 +42,6 @@ from .compat import (
     compat_basestring,
     compat_chr,
     compat_cookiejar,
-    compat_ctypes_WINFUNCTYPE,
     compat_etree_fromstring,
     compat_expanduser,
     compat_html_entities,
@@ -3135,90 +3133,11 @@ def platform_name():
     return res
 
 
-def _windows_write_string(s, out):
-    """ Returns True if the string was written using special methods,
-    False if it has yet to be written out."""
-    # Adapted from http://stackoverflow.com/a/3259271/35070
-
-    import ctypes
-    import ctypes.wintypes
-
-    WIN_OUTPUT_IDS = {
-        1: -11,
-        2: -12,
-    }
-
-    try:
-        fileno = out.fileno()
-    except AttributeError:
-        # If the output stream doesn't have a fileno, it's virtual
-        return False
-    except io.UnsupportedOperation:
-        # Some strange Windows pseudo files?
-        return False
-    if fileno not in WIN_OUTPUT_IDS:
-        return False
-
-    GetStdHandle = compat_ctypes_WINFUNCTYPE(
-        ctypes.wintypes.HANDLE, ctypes.wintypes.DWORD)(
-        ('GetStdHandle', ctypes.windll.kernel32))
-    h = GetStdHandle(WIN_OUTPUT_IDS[fileno])
-
-    WriteConsoleW = compat_ctypes_WINFUNCTYPE(
-        ctypes.wintypes.BOOL, ctypes.wintypes.HANDLE, ctypes.wintypes.LPWSTR,
-        ctypes.wintypes.DWORD, ctypes.POINTER(ctypes.wintypes.DWORD),
-        ctypes.wintypes.LPVOID)(('WriteConsoleW', ctypes.windll.kernel32))
-    written = ctypes.wintypes.DWORD(0)
-
-    GetFileType = compat_ctypes_WINFUNCTYPE(ctypes.wintypes.DWORD, ctypes.wintypes.DWORD)(('GetFileType', ctypes.windll.kernel32))
-    FILE_TYPE_CHAR = 0x0002
-    FILE_TYPE_REMOTE = 0x8000
-    GetConsoleMode = compat_ctypes_WINFUNCTYPE(
-        ctypes.wintypes.BOOL, ctypes.wintypes.HANDLE,
-        ctypes.POINTER(ctypes.wintypes.DWORD))(
-        ('GetConsoleMode', ctypes.windll.kernel32))
-    INVALID_HANDLE_VALUE = ctypes.wintypes.DWORD(-1).value
-
-    def not_a_console(handle):
-        if handle == INVALID_HANDLE_VALUE or handle is None:
-            return True
-        return ((GetFileType(handle) & ~FILE_TYPE_REMOTE) != FILE_TYPE_CHAR
-                or GetConsoleMode(handle, ctypes.byref(ctypes.wintypes.DWORD())) == 0)
-
-    if not_a_console(h):
-        return False
-
-    def next_nonbmp_pos(s):
-        try:
-            return next(i for i, c in enumerate(s) if ord(c) > 0xffff)
-        except StopIteration:
-            return len(s)
-
-    while s:
-        count = min(next_nonbmp_pos(s), 1024)
-
-        ret = WriteConsoleW(
-            h, s, count if count else 2, ctypes.byref(written), None)
-        if ret == 0:
-            raise OSError('Failed to write string')
-        if not count:  # We just wrote a non-BMP character
-            assert written.value == 2
-            s = s[1:]
-        else:
-            assert written.value > 0
-            s = s[written.value:]
-    return True
-
-
 def write_string(s, out=None, encoding=None):
     if out is None:
         out = sys.stderr
     assert type(s) == compat_str
 
-    if sys.platform == 'win32' and encoding is None and hasattr(out, 'fileno'):
-        if _windows_write_string(s, out):
-            return
-
     if ('b' in getattr(out, 'mode', '')
             or sys.version_info[0] < 3):  # Python 2 lies about mode of sys.stderr
         byt = s.encode(encoding or preferredencoding(), 'ignore')
@@ -3248,78 +3167,22 @@ def intlist_to_bytes(xs):
 
 
 # Cross-platform file locking
-if sys.platform == 'win32':
-    import ctypes.wintypes
-    import msvcrt
-
-    class OVERLAPPED(ctypes.Structure):
-        _fields_ = [
-            ('Internal', ctypes.wintypes.LPVOID),
-            ('InternalHigh', ctypes.wintypes.LPVOID),
-            ('Offset', ctypes.wintypes.DWORD),
-            ('OffsetHigh', ctypes.wintypes.DWORD),
-            ('hEvent', ctypes.wintypes.HANDLE),
-        ]
-
-    kernel32 = ctypes.windll.kernel32
-    LockFileEx = kernel32.LockFileEx
-    LockFileEx.argtypes = [
-        ctypes.wintypes.HANDLE,     # hFile
-        ctypes.wintypes.DWORD,      # dwFlags
-        ctypes.wintypes.DWORD,      # dwReserved
-        ctypes.wintypes.DWORD,      # nNumberOfBytesToLockLow
-        ctypes.wintypes.DWORD,      # nNumberOfBytesToLockHigh
-        ctypes.POINTER(OVERLAPPED)  # Overlapped
-    ]
-    LockFileEx.restype = ctypes.wintypes.BOOL
-    UnlockFileEx = kernel32.UnlockFileEx
-    UnlockFileEx.argtypes = [
-        ctypes.wintypes.HANDLE,     # hFile
-        ctypes.wintypes.DWORD,      # dwReserved
-        ctypes.wintypes.DWORD,      # nNumberOfBytesToLockLow
-        ctypes.wintypes.DWORD,      # nNumberOfBytesToLockHigh
-        ctypes.POINTER(OVERLAPPED)  # Overlapped
-    ]
-    UnlockFileEx.restype = ctypes.wintypes.BOOL
-    whole_low = 0xffffffff
-    whole_high = 0x7fffffff
+try:
+    import fcntl
 
     def _lock_file(f, exclusive):
-        overlapped = OVERLAPPED()
-        overlapped.Offset = 0
-        overlapped.OffsetHigh = 0
-        overlapped.hEvent = 0
-        f._lock_file_overlapped_p = ctypes.pointer(overlapped)
-        handle = msvcrt.get_osfhandle(f.fileno())
-        if not LockFileEx(handle, 0x2 if exclusive else 0x0, 0,
-                          whole_low, whole_high, f._lock_file_overlapped_p):
-            raise OSError('Locking file failed: %r' % ctypes.FormatError())
+        fcntl.flock(f, fcntl.LOCK_EX if exclusive else fcntl.LOCK_SH)
 
     def _unlock_file(f):
-        assert f._lock_file_overlapped_p
-        handle = msvcrt.get_osfhandle(f.fileno())
-        if not UnlockFileEx(handle, 0,
-                            whole_low, whole_high, f._lock_file_overlapped_p):
-            raise OSError('Unlocking file failed: %r' % ctypes.FormatError())
+        fcntl.flock(f, fcntl.LOCK_UN)
+except ImportError:
+    UNSUPPORTED_MSG = 'file locking is not supported on this platform'
 
-else:
-    # Some platforms, such as Jython, is missing fcntl
-    try:
-        import fcntl
-
-        def _lock_file(f, exclusive):
-            fcntl.flock(f, fcntl.LOCK_EX if exclusive else fcntl.LOCK_SH)
-
-        def _unlock_file(f):
-            fcntl.flock(f, fcntl.LOCK_UN)
-    except ImportError:
-        UNSUPPORTED_MSG = 'file locking is not supported on this platform'
-
-        def _lock_file(f, exclusive):
-            raise IOError(UNSUPPORTED_MSG)
+    def _lock_file(f, exclusive):
+        raise IOError(UNSUPPORTED_MSG)
 
-        def _unlock_file(f):
-            raise IOError(UNSUPPORTED_MSG)
+    def _unlock_file(f):
+        raise IOError(UNSUPPORTED_MSG)
 
 
 class locked_file(object):
@@ -3565,29 +3428,7 @@ def fix_xml_ampersands(xml_str):
 
 
 def setproctitle(title):
-    assert isinstance(title, compat_str)
-
-    # ctypes in Jython is not complete
-    # http://bugs.jython.org/issue2148
-    if sys.platform.startswith('java'):
-        return
-
-    try:
-        libc = ctypes.cdll.LoadLibrary('libc.so.6')
-    except OSError:
-        return
-    except TypeError:
-        # LoadLibrary in Windows Python 2.7.13 only expects
-        # a bytestring, but since unicode_literals turns
-        # every string into a unicode string, it fails.
-        return
-    title_bytes = title.encode('utf-8')
-    buf = ctypes.create_string_buffer(len(title_bytes))
-    buf.value = title_bytes
-    try:
-        libc.prctl(15, buf, 0, 0, 0)
-    except AttributeError:
-        return  # Strange libc, just skip this
+    return
 
 
 def remove_start(s, start):
-- 
2.31.1

